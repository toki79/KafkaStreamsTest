
spring.application.name: stream-table-sample

spring.cloud.stream.kafka.binder.brokers=tobi0179.westeurope.cloudapp.azure.com
spring.cloud.stream.kafka.streams.binder.brokers=tobi0179.westeurope.cloudapp.azure.com

spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kstream.binder.configuration.value.serde=org.springframework.kafka.support.serializer.JsonSerde

# tier 1 - landing zone
spring.cloud.stream.bindings.t1_contract_out.destination=tier1.contract.d
spring.cloud.stream.bindings.t1_contract_in.destination=tier1.contract.d

spring.cloud.stream.bindings.t1_cashflow_in.destination=tier1.cashflow.d
spring.cloud.stream.bindings.t1_cashflow_out.destination=tier1.cashflow.d

spring.cloud.stream.bindings.t1_category_in.destination=tier1.category.d
spring.cloud.stream.bindings.t1_category_out.destination=tier1.category.d

# tier 2 - object creation
spring.cloud.stream.bindings.t2_contract_in.destination=tier2.contract.d
spring.cloud.stream.bindings.t2_contract_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_contract_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_contract_out.destination=tier2.contract.d
spring.cloud.stream.bindings.t2_contract_out.useNativeEncoding=true
spring.cloud.stream.bindings.t2_contract_out.useNativeDecoding=true

spring.cloud.stream.bindings.t2_cashflow_in.destination=tier2.cashflow.d
spring.cloud.stream.bindings.t2_cashflow_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_cashflow_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_cashflow_out.destination=tier2.cashflow.d
spring.cloud.stream.bindings.t2_cashflow_out.useNativeEncoding=true
spring.cloud.stream.bindings.t2_cashflow_out.useNativeDecoding=true

spring.cloud.stream.bindings.t2_category_in.destination=tier2.category.d
spring.cloud.stream.bindings.t2_category_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_category_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_category_out.destination=tier2.category.d
spring.cloud.stream.bindings.t2_category_out.useNativeEncoding=true
spring.cloud.stream.bindings.t2_category_out.useNativeDecoding=true

spring.cloud.stream.bindings.t2_join_sample_cashflow_stream_in.destination=tier2.cashflow.d
spring.cloud.stream.bindings.t2_join_sample_cashflow_stream_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_join_sample_cashflow_stream_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_join_sample_contract_stream_in.destination=tier2.contract.d
spring.cloud.stream.bindings.t2_join_sample_contract_stream_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_join_sample_contract_stream_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_cashflow_categorizer_cashflow_stream_in.destination=tier2.cashflow.d
spring.cloud.stream.bindings.t2_cashflow_categorizer_cashflow_stream_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_cashflow_categorizer_cashflow_stream_in.useNativeDecoding=true

spring.cloud.stream.bindings.t2_cashflow_categorizer_category_stream_in.destination=tier2.category.d
spring.cloud.stream.bindings.t2_cashflow_categorizer_category_stream_in.useNativeEncoding=true
spring.cloud.stream.bindings.t2_cashflow_categorizer_category_stream_in.useNativeDecoding=true



# tier 3 - lookups, etc

# join sample
spring.cloud.stream.bindings.t3_join_sample_joined_out.destination=tier3.joined.d
spring.cloud.stream.bindings.t3_join_sample_joined_out.useNativeEncoding=true
spring.cloud.stream.bindings.t3_join_sample_joined_out.useNativeDecoding=true

spring.cloud.stream.bindings.t3_join_sample_joined_in.destination=tier3.joined.d
spring.cloud.stream.bindings.t3_join_sample_joined_in.useNativeEncoding=true
spring.cloud.stream.bindings.t3_join_sample_joined_in.useNativeDecoding=true


# categorize sample
spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_out.destination=tier3.categorized_cashflow.d
spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_out.useNativeEncoding=true
spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_out.useNativeDecoding=true

spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_in.destination=tier3.categorized_cashflow.d
spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_in.useNativeEncoding=true
spring.cloud.stream.bindings.t3_cashflow_categorizer_categorized_cashflow_in.useNativeDecoding=true

#For testing
#spring.cloud.stream.bindings.input.destination=tier3.categorized_cashflow.d
#spring.cloud.stream.bindings.input.destination=tier3.joined.d


#Serdes
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde

# THIS IS VERY IMPORTANT FOR STREAMING (if wrong, you get a ClassCastException)

spring.cloud.stream.kafka.streams.bindings.t2_cashflow_categorizer_cashflow_stream_in.consumer.application-id=categorizer
spring.cloud.stream.kafka.streams.bindings.t2_cashflow_categorizer_cashflow_stream_in.consumer.valueSerde=tki.bigdata.serde.CashflowSerde
spring.cloud.stream.kafka.streams.bindings.t2_contract_stream_in.consumer.application-id=categorizer
spring.cloud.stream.kafka.streams.bindings.t2_contract_stream_in.consumer.valueSerde=tki.bigdata.serde.ContractSerde
spring.cloud.stream.kafka.streams.bindings.t2_cashflow_categorizer_category_stream_in.consumer.application-id=categorizer
spring.cloud.stream.kafka.streams.bindings.t2_cashflow_categorizer_category_stream_in.consumer.valueSerde=tki.bigdata.serde.CategorySerde
spring.cloud.stream.kafka.streams.bindings.t3_cashflow_categorizer_categorized_cashflow_out.producer.valueSerde=tki.bigdata.serde.CashflowSerde

spring.cloud.stream.kafka.streams.bindings.t2_join_sample_cashflow_stream_in.consumer.valueSerde=tki.bigdata.serde.CashflowSerde
spring.cloud.stream.kafka.streams.bindings.t2_join_sample_contract_stream_in.consumer.valueSerde=tki.bigdata.serde.ContractSerde

#spring.cloud.stream.kafka.streams.bindings.t3_join_sample_joined_out.applicationid=joinsample
spring.cloud.stream.kafka.streams.bindings.t3_join_sample_joined_in.consumer.application-id=joinsample
spring.cloud.stream.kafka.streams.bindings.t3_join_sample_joined_out.producer.valueSerde=tki.bigdata.serde.MyValueContainerSerde
spring.cloud.stream.kafka.streams.bindings.t3_join_sample_joined_in.consumer.valueSerde=tki.bigdata.serde.MyValueContainerSerde


